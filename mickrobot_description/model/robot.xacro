<?xml version="1.0"?>

<robot name="differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

<!-- Body dimensions -->
<xacro:property name="body_link_x_dim" value="1"/>
<xacro:property name="body_link_y_dim" value="0.6"/>
<xacro:property name="body_link_z_dim" value="0.3"/>

<!-- Wheel dimensions -->
<xacro:property name="wheel_link_radius" value="0.15"/>
<xacro:property name="wheel_link_length" value="0.1"/>
<xacro:property name="wheel_link_z_location" value="-0.1"/>

<!-- Material Density -->
<xacro:property name="body_density" value="2710.0"/>
<xacro:property name="wheel_density" value="2710.0"/>

<!-- Pi Constant -->
<xacro:property name="pi_const" value="3.141592265"/>


<!-- Robot body and wheel mass -->
<xacro:property name="body_mass" value="${body_density*body_link_x_dim*body_link_y_dim*body_link_z_dim}"/>
<xacro:property name="wheel_mass" value="${wheel_density*pi_const*wheel_link_radius*wheel_link_radius*wheel_link_length}"/>

<!-- Moments of inertial of the wheel -->
<xacro:property name="Iz_wheel" value="${0.5*wheel_mass*wheel_link_radius*wheel_link_radius}"/>
<xacro:property name="I_wheel" value="${(1.0/12.0)*wheel_mass*(3*wheel_link_radius*wheel_link_radius+wheel_link_length*wheel_link_length)}"/>

<!-- macros -->

<xacro:macro name="inertia_wheel">
    <inertial>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <mass value="${wheel_mass}"/>
        <inertia ixx="${I_wheel}" ixy="0.0" ixz="0.0" iyy="${I_wheel}" iyz="0" izz="${Iz_wheel}"/>
    </inertial>
</xacro:macro>

<xacro:include filename="$(find mickrobot_description)/urdf/robot.gazebo"/>


<!-- DEFINING LINKS AND JOINTS -->

<link name="dummy">
</link>
<joint name="dummy_joint" type="fixed">
    <parent link="dummy"/>
    <child link="body_link"/>
</joint>

<!-- Body Link of Robot -->

<link name="body_link">
    <visual>
        <geometry>
            <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}" />
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>
    </visual>

    <collision>
        <geometry>
            <box size="${body_link_x_dim} ${body_link_y_dim} ${body_link_z_dim}" />
        </geometry>
        <origin rpy="0 0 0" xyz="0 0 0"/>   
    </collision>

    <inertial>
        <origin rpy="0 0 0" xyz="0 0 0"/>
        <mass value="${body_mass}"/>
        <inertia
        ixx="${(1/12)*body_mass*(body_link_y_dim+body_link_z_dim*body_link_z_dim)}"
        ixy="0"
        ixz="0"
        iyy="${(1/12)*body_mass*(body_link_x_dim*body_link_x_dim+body_link_z_dim*body_link_z_dim)}"
        iyz="0"
        izz="${(1/12)*body_mass*(body_link_y_dim*body_link_y_dim+body_link_x_dim*body_link_x_dim)}"/>
    </inertial>
</link>










<!-- Back Right Wheel of Robot & Joint -->

<joint name="wheel1_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel1_link"/>
    <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${-body_link_y_dim/2-wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel1_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel />
</link>


<!-- Back Left Wheel of Robot & Joint -->

<joint name="wheel2_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel2_link"/>
    <origin xyz="${-body_link_x_dim/2+1.2*wheel_link_radius} ${body_link_y_dim/2+wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel2_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel />
</link>


<!-- Front Right Wheel of Robot & Joint -->

<joint name="wheel3_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel3_link"/>
    <origin xyz="${body_link_x_dim/2-1.2*wheel_link_radius} ${-body_link_y_dim/2-wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel3_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel />
</link>


<!-- Front Left Wheel of Robot & Joint -->

<joint name="wheel4_joint" type="continuous">
    <parent link="body_link"/>
    <child link="wheel4_link"/>
    <origin xyz="${body_link_x_dim/2-1.2*wheel_link_radius} ${body_link_y_dim/2+wheel_link_length/2} ${wheel_link_z_location}" rpy="0 0 0"/>
    <axis xyz="0 1 0"/>
    <limit effort="1000" velocity="1000"/>
    <dynamics damping="1.0" friction="1.0"/>
</joint>

<link name="wheel4_link">
    <visual>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </visual>

    <collision>
        <origin rpy="1.570795 0 0" xyz="0 0 0"/>
        <geometry>
            <cylinder length="${wheel_link_length}" radius="${wheel_link_radius}"/>
        </geometry>
    </collision>

    <xacro:inertia_wheel />
</link>

<!-- LiDAR Sensor Link and Joint -->
<link name="lidar_link">
    <visual>
        <origin rpy="0 0 0" xyz="0 0 0.2"/>
        <geometry>
            <cylinder length="0.1" radius="0.05"/>
        </geometry>
    </visual>
    <collision>
        <origin rpy="0 0 0" xyz="0 0 0.2"/>
        <geometry>
            <cylinder length="0.1" radius="0.05"/>
        </geometry>
    </collision>
    <inertial>
        <origin rpy="0 0 0" xyz="0 0 0.2"/>
        <mass value="0.1"/>
        <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
</link>

<joint name="lidar_joint" type="fixed">
    <parent link="body_link"/>
    <child link="lidar_link"/>
    <origin xyz="0.122 0 0.212" rpy="0 0 0"/>
</joint>

<!-- LiDAR Sensor Plugin -->
<gazebo reference="lidar_link">
    <material>Gazebo/Blue</material>
    <sensor type="ray" name="lidar">
        <pose>0 0 0 0 0 0</pose>
        <visualize>true</visualize>
        <update_rate>10</update_rate>
        <ray>
            <scan>
                <horizontal>
                    <samples>360</samples>
                    <resolution>1</resolution>
                    <min_angle>-3.14159</min_angle>
                    <max_angle>3.14159</max_angle>
                </horizontal>
            </scan>
            <range>
                <min>0.3</min>
                <max>12.0</max>
                <resolution>0.01</resolution>
            </range>
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.01</stddev>
            </noise>
        </ray>
        <plugin name="gazebo_ros_lidar_controller" filename="libgazebo_ros_ray_sensor.so">
            <ros>
                <namespace>/</namespace>
                <remapping>~/out:=scan</remapping>
            </ros>
            <output_type>sensor_msgs/LaserScan</output_type>
            <frame_name>lidar_link</frame_name>
        </plugin>
    </sensor>
</gazebo>

<!-- Camera Link and Joint -->
<link name="camera_link">
    <visual>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.05 0.05 0.05"/>
        </geometry>
        <material name="black">
            <color rgba="0 0 0 1"/>
        </material>
    </visual>
    <collision>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <geometry>
            <box size="0.05 0.05 0.05"/>
        </geometry>
    </collision>
    <inertial>
        <mass value="0.1"/>
        <origin xyz="0 0 0" rpy="0 0 0"/>
        <inertia ixx="0.0001" ixy="0" ixz="0" iyy="0.0001" iyz="0" izz="0.0001"/>
    </inertial>
</link>

<joint name="camera_joint" type="fixed">
    <parent link="body_link"/>
    <child link="camera_link"/>
    <origin xyz="${body_link_x_dim/2} 0 ${body_link_z_dim/2}" rpy="0 0 0"/>
</joint>

<!-- Camera Gazebo Plugin -->
<gazebo reference="camera_link">
    <material>Gazebo/Black</material>
    <sensor type="camera" name="camera">
        <update_rate>30.0</update_rate>
        <camera name="head">
            <horizontal_fov>1.3962634</horizontal_fov>
            <image>
                <width>800</width>
                <height>600</height>
                <format>R8G8B8</format>
            </image>
            <clip>
                <near>0.02</near>
                <far>300</far>
            </clip>
            <noise>
                <type>gaussian</type>
                <mean>0.0</mean>
                <stddev>0.007</stddev>
            </noise>
        </camera>
        <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
            <alwaysOn>true</alwaysOn>
            <updateRate>0.0</updateRate>
            <cameraName>camera</cameraName>
            <imageTopicName>image_raw</imageTopicName>
            <cameraInfoTopicName>camera_info</cameraInfoTopicName>
            <frameName>camera_link</frameName>
            <hackBaseline>0.07</hackBaseline>
            <distortionK1>0.0</distortionK1>
            <distortionK2>0.0</distortionK2>
            <distortionK3>0.0</distortionK3>
            <distortionT1>0.0</distortionT1>
            <distortionT2>0.0</distortionT2>
        </plugin>
    </sensor>
</gazebo>

</robot>